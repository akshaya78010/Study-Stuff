Types of Joins
INNER JOIN:

Returns rows where there is a match in both tables.
Unmatched rows are excluded.
Syntax:


SELECT columns
FROM table1
INNER JOIN table2
ON table1.column = table2.column;
Example:


SELECT employees.name, departments.department_name
FROM employees
INNER JOIN departments
ON employees.department_id = departments.department_id;
LEFT JOIN (or LEFT OUTER JOIN):

LEFT JOIN (or LEFT OUTER JOIN):
Returns all rows from the left table and matched rows from the right table.
If no match is found, the result includes NULL for columns from the right table.
Syntax:


SELECT columns
FROM table1
LEFT JOIN table2
ON table1.column = table2.column;
Example:


SELECT customers.name, orders.order_date
FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.customer_id;
RIGHT JOIN (or RIGHT OUTER JOIN):

RIGHT JOIN (or RIGHT OUTER JOIN):
Returns all rows from the right table and matched rows from the left table.
If no match is found, the result includes NULL for columns from the left table.
Syntax:


SELECT columns
FROM table1
RIGHT JOIN table2
ON table1.column = table2.column;
Example:


SELECT employees.name, projects.project_name
FROM employees
RIGHT JOIN projects
ON employees.employee_id = projects.employee_id;
FULL JOIN (or FULL OUTER JOIN):

FULL JOIN (or FULL OUTER JOIN):
Returns all rows when there is a match in either table.
If there is no match, NULL values are returned for the unmatched rows.
Syntax:


SELECT columns
FROM table1
FULL JOIN table2
ON table1.column = table2.column;
Example:


SELECT students.name, courses.course_name
FROM students
FULL JOIN courses
ON students.course_id = courses.course_id;
CROSS JOIN:

CROSS JOIN:
Returns the Cartesian product of both tables (all combinations of rows).
Does not require a condition.
Syntax:


SELECT columns
FROM table1
CROSS JOIN table2;
Example:


SELECT products.name, categories.category_name
FROM products
CROSS JOIN categories;
SELF JOIN:

Joins a table to itself.
Typically used when a table has hierarchical data.
Syntax:


SELECT A.column1, B.column2
FROM table A, table B
WHERE A.common_column = B.common_column;
Example:


SELECT e1.name AS Employee, e2.name AS Manager
FROM employees e1
INNER JOIN employees e2
ON e1.manager_id = e2.employee_id;
Key Concepts
JOIN Conditions (ON or USING):

SELF JOIN:
Use ON to specify the condition for the join.
Use USING when the column name is the same in both tables.
Example with USING:


SELECT column1, column2
FROM table1
INNER JOIN table2
USING (common_column);
Aliases:

Simplify table names using aliases for readability.

SELECT A.name, B.salary
FROM employees A
INNER JOIN salaries B
ON A.employee_id = B.employee_id;
Performance:

Ensure indexes exist on the columns used in ON conditions for faster joins.
