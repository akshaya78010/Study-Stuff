import java.util.Scanner;
/*Interfaces:-
1.interfacaes in java are created using a keyword "interface".
2.interface itself are abstract,every method that we declare inside an interface is by default public abstract.
3.interface can only have *abstract methods ,methods implementation.
4.a class acan implements the interface using a "implements" keyword
5.when a class implements a particular interface it should provide concrete implementation for the abstract methods present in the interface
6.with this feature we can ensure the uniformity between the classes that implement the same interface
7.if the class fails to implement one or more methods of an interface the class itself must be made as an abstract class.
8.it is not possible to create the instances of interface ,however it is possible to store the instace of a class which is implementing interface insede an interface refrence variable.
9.but doing this makes us use the methods sspecicfic to that inetrface.
*/
/**
 * AbstractClass
 */
/*
public interface Factorial {

    public int fact(int n);
}
class Main1 implements Factorial{
    public int fact(int n)
    {
        int i = 1;
        int f =1;
        for(i = 1 ; i <= n ; i++)
        {
            f = f * i;
        }
        return f;
    }
}
class Main2 implements factorial{
    public int fact(int n)
   {
    if(n == 1)
    {
        return 1;
    }
    return n * fact(n-1);
   }
}
public class AbstractClass {
 public static void main(String args[]){
    Main1 m1 = new Main1();
    int res1 = m1.fact(4);
    System.out.println(res1);
    Main2 m2 = new Main2();
    int res2 = m2.fact(4);
    System.out.println(res2);
 }
}*/
/**
 * AbstractClass
 */
/*
interface A{
    void method1();
}
interface B{
    void method2();
}
class x implements A,B{
   void method1()
   {
    System.out.println("this is method 1");
   }
   void method2()
   {
    System.out.println("this is method 2");
   }
}
class AbstractClass{
    public static void main(String args[])
    {
            //reference variable for interface  can store an instance of the class imlementin the interface
            A obj = new x();
            obj.method1();
            obj.method2();
    }
}*/
/*
 EXAMPLES IN INTERFACTES
 MouseListeners from java.awt.event package
 ResultSet from ajav.sql package
 comparable fron java,lang package
 */
/*
class Student implements Comparable<Student>{
    String name;
    int age;
    double cgpa;
    public Student(String name,int age,double cgpa)
    {
        this.name = name;
        this.age  = age;
        this.cgpa = cgpa;
    }
    public String toString()
    {
        return "String(" + name + "," + age + ',' + cgpa + ")";
    }
    public int compareTo(String that)
    {
        if(this.age == that.age)
        {
            return this.name.compareTo(that.name);
        }
        else
        {
            return this.age.compareTo(that.age);
        }

    }
}
public class Interfaces{
    public static void main(){
Student students[] = {new Student("abc",21,234.67),
new Student("xry",18,345.32),new Student("jkds",19,4536.65)};
System.out.println(Arrays.toString(students));
Arrays.sort(students);
System.out.println(Arrays.toString(students));
    }
}*/

/*
 * import java.util.Scanner;
class DateOfBirth{
    int day,month,year;
    DateOfBirth(int day,int month,int year)
    {
        this.day = day;
        this.month = month;
        this.year = year;
    }
    public String toString(){
        return "\"" + day + "-" + month + "-" + "year" + "\"";
    }
}
class Employee implements Comparable<Employee>{
    String name;
    double salary;
    DateOfBirth dob;
    Employee(String name.double salary,DateOfBirth dob)
    {
        this.name = name;
        this.salary = salary;
        this.dob = dob;
    }
    public String toString()
    {
        return "Employee(" + name + "," + salary + "," + dob + ")";
    }
}
class Clean{
    public static void main(String args[])
    {
        Employee e1[] = {new Employee("abc",12680,new DateOfBirth(29,3,2006)),
        new Employee("hgf",10987,new DateOfBirth(12,5,1994)),
        new Employee("abc",12680,new DateOfBirth(3,7,2009))
        ,new Employee("abc",12680,new DateOfBirth(4,9,2020));
            System.out.println(Arrays.toString(e1));
        }
}
}


 */
/* default and static methods in interface
----------------------------------------------
1. added from java 8(java SE 1.8 ->2014)
2.default method is method with concrete implementtation
 */
/*
interface interface1{
    void method1();
    default void method2()
    {
        System.out.println("i am a default method");
    }
}
class MyClass implements interface1 {
    public void method1() {
        System.out.println("Hello");
    }
}
    public class Interface2 {
        public static void main(String[] args) {
            MyClass obj = new MyClass();
            obj.method1();
            obj.method2();
        }
    }
*/
/*Functional interfaces
1.an interface with only one abstract method is called a functional interface.A functional interface can have any number of static or default methods but only onr abstract method.
2.you can use Annotation@ FunctionalInterface on top any interface to ensure it won't contain more than one abstract method
3.Functional interfaces are used to write lambda functions in java
4.since functional interfaces will contain only one abstract method with exactly one signature there is a possibility of using them as lambda functions.
*/
/*
@FunctionalInterface
interface IntegerOperation{


    int operate(int a, int b);
}
class Add implements IntegerOperation{

    @Override
    public int operate(int a, int b) {
        return a + b;
    }
}
class Multiplication implements IntegerOperation{

    @Override
    public int operate(int a, int b) {
        return a * b;
    }
}
public class Interface2
{
    public static void main(String[] args)
    {
        Add m2 = new Add();
System.out.println(m2.operate(10,20));
Multiplication m3 = new Multiplication();
System.out.println(m3.operate(10,20));
    }
}
*/
/*
@FunctionalInterface
interface IntegerOperation{
    int operate(int a, int b);
}
public class Interface2
{
    public static void main(String[] args)
    {
        IntegerOperation x = (a,b) -> a+b;//anonymous implementation of interface
                                          //also called as lambda ijn java
        System.out.println(x.operate(10,20));
        IntegerOperation y = (a,b) -> a*b;
        System.out.println(y.operate(10,20));
    }
}*/
/*
@FunctionalInterface
interface IntegerOperation{
    int operate(int a, int b);
}
public class Interface2
{
    public static void main(String[] args)
    {
        IntegerOperation x = (a,b) -> a+b;//anonymous implementation of interface
        //also called as lambda ijn java
        System.out.println(x.operate(10,20));
        IntegerOperation y = (a,b) -> {
            int fc1 = 0;
            int fc2 = 0;
            for(int i =1 ; i <= a ;i++) if(a%i == 0) fc1++;
            for(int i = 1 ; i <= b ;i++) if(b%i == 0)fc2++;
            return fc1+fc2;
        };
        System.out.println(y.operate(10,20));
    }
}*/
//String[] arr = {"tokyo","rio","nairobi","professor","berlin"}
/*
import java.util.Arrays;

import static java.lang.CharSequence.compare;
//import static java.lang.StringLatin1.compareTo;
//import static java.lang.StringUTF16.compareTo;

interface StringCompare{
    int compare(String a,String b);
}
public class Interface2 {
    public static void bubbleSort(String[] arr,StringCompare com)
    {
        for(int i = 0; i < arr.length ; i++)
        {
            for(int j = 0; j < arr.length-1 ; j++)
            {
                if(com.compare(arr[j],arr[j+1]) > 0)
                {
                    String temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
    public static void main(String[] args)
    {
        String[] arr = {"tokyo","rio","nairobi","professor","berlin"};
        System.out.println("BEFORE SORTING" + Arrays.toString(arr));
        bubbleSort(arr,(a,b)->a.compareTo(b));
        System.out.println("AFTER SORTING: " + Arrays.toString(arr));
        System.out.println("BEFORE SORTING" + Arrays.toString(arr));
        bubbleSort(arr,(a,b)-> a.length() - b.length());
        System.out.println("AFTER SORTING: " + Arrays.toString(arr));
        System.out.println("BEFORE SORTING" + Arrays.toString(arr));
        bubbleSort(arr,(a,b)->a.compareTo(b));
        System.out.println("AFTER SORTING: " + Arrays.toString(arr));
    }

}
*/
/*GENERICS IN JAVA
java allows us ton write
1.generics methods
2.generic classes
3.generic interfaces
to handle different types of data without having the requirement write same code multiple times
 */
/*
 class Studenta{
    String name;
    int age;
   public  Studenta(String name,int age)
    {
        this.name = name;
        this.age = age;
    }
 public String ToString()
 {
     return "(name: " + name + "," + "age: " + age + ")";
 }
}
public class Interface2 {
    static <T>void print(T[] intArray)
    {
        for(T eachValue:intArray){
            System.out.print(eachValue + " ");
        }
    }
    public static void main(String[] args) {
        Integer[] intArray = {10, 20, 30, 40, 50};
        print(intArray);
        Double[] doubleArray = {12.34,234.5,345.64,345.7};
        print(doubleArray);
        String[] stringArray = {"adf","kjh","ert","dfg"};
        print(stringArray);
        Studenta[] students = {new Studenta("asd",19),new Studenta("werty",22)};
        print(students);
    }
}
*/
/*
class Pair<K,V>{
    K Key;
    V Value;
    Pair(K Key,V Value)
    {
        this.Key = Key;
        this.Value = Value;
    }
    public K getKey(){
        return Key;
    }
    public V getValue() {
        return Value;
    }
}
public class Interface2 {
    public static void main(String[] args)
    {
        Pair<Integer,String> p1 = new Pair(12,"akshaya");
        System.out.println(p1.getKey());
        System.out.println(p1.getValue());
    }
}
*/





