Example BFS vector

Input vector:

[1, 2, 3, -1, -1, 4, 5]


(-1 means null)

This tree is:

       1
      / \
     2   3
        / \
       4   5

Algorithm (to build tree from BFS vector)

Take the first element → root.

Use a queue to store nodes as you build.

For each node in the queue:

Assign the next vector element as its left child (if not null).

Assign the next element as its right child (if not null).

Push non-null children into the queue.

C++ Code
#include <bits/stdc++.h>
using namespace std;

class TreeNode {
public:
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

TreeNode* buildTree(vector<int>& arr) {
    if (arr.empty() || arr[0] == -1) return NULL;

    TreeNode* root = new TreeNode(arr[0]);
    queue<TreeNode*> q;
    q.push(root);

    int i = 1;
    while (!q.empty() && i < arr.size()) {
        TreeNode* curr = q.front();
        q.pop();

        // Left child
        if (i < arr.size() && arr[i] != -1) {
            curr->left = new TreeNode(arr[i]);
            q.push(curr->left);
        }
        i++;

        // Right child
        if (i < arr.size() && arr[i] != -1) {
            curr->right = new TreeNode(arr[i]);
            q.push(curr->right);
        }
        i++;
    }

    return root;
}

void inorder(TreeNode* root) {
    if (!root) return;
    inorder(root->left);
    cout << root->val << " ";
    inorder(root->right);
}

int main() {
    vector<int> arr = {1, 2, 3, -1, -1, 4, 5};
    TreeNode* root = buildTree(arr);

    cout << "Inorder: ";
    inorder(root);
}

Output for {1,2,3,-1,-1,4,5}
Inorder: 2 1 4 3 5


✅ Difference:

Your BST insertion method → builds a BST from values.

This BFS method → builds the exact tree structure given (not necessarily BST).
