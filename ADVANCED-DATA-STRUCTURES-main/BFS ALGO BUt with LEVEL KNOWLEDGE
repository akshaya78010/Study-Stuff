#include <iostream>
#include <queue>
#include <vector>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

void levelOrderWithLevels(TreeNode* root) {
    if (root == nullptr) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int levelSize = q.size(); // Number of nodes at the current level
        cout << "Level: ";

        for (int i = 0; i < levelSize; i++) {
            TreeNode* current = q.front();
            q.pop();

            cout << current->val << " "; // Print the current node's value

            if (current->left) q.push(current->left);   // Enqueue left child
            if (current->right) q.push(current->right); // Enqueue right child
        }

        cout << endl; // End of the current level
    }
}

int main() {
    // Create a binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->right = new TreeNode(6);

    // Perform level-order traversal with levels
    levelOrderWithLevels(root);

    return 0;
}
